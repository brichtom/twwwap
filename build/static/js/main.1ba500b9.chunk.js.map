{"version":3,"sources":["components/Header.jsx","components/Row.jsx","components/List.jsx","components/Alert.jsx","containers/AddForm.jsx","services/storage.js","App.js","serviceWorker.js","index.js"],"names":["header","className","id","href","props","useState","checked","setChecked","key","episode","title","series","comment","name","type","onChange","isChecked","addToExport","removeFromExport","handleChange","onClick","remove","list","map","Row","alert","message","AddForm","emptyState","content","valid","state","event","field","updtedValue","target","value","this","setState","input","preventDefault","add","onSubmit","htmlFor","inputChangeHandler","disabled","isValid","Component","getEpisodes","episodes","localStorage","getItem","JSON","parse","App","toExport","data","sort","sortById","push","a","b","setItem","stringify","saveEpisode","length","showAlert","forEach","serial","index","splice","removeEpisode","setTimeout","idToRemove","exportedData","idsToExport","serials","idToExp","Blob","downloadUrl","window","URL","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","parentNode","removeChild","addEpisode","export","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba500b9.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function header() {\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark \">\n        <div className=\"collapse navbar-collapse\" id=\"navbarMenu\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"index.html\">\n                Seriály\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <div className=\"jumbotron text-center\">\n        <h1>Můj přehled seriálů</h1>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport default (props) => {\n\n    const [checked, setChecked] = useState(false);\n\n    const handleChange = (id) => {\n        const isChecked = !checked;\n        if (isChecked) {\n            props.addToExport(id);\n        } else {\n            props.removeFromExport(id);\n        }\n        setChecked(isChecked);\n    }\n\n    return (\n        <tr key={props.episode.id}>\n            <td>{props.episode.title}</td>\n            <td>{props.episode.series}</td>\n            <td>{props.episode.episode}</td>\n            <td>{props.episode.comment}</td>\n            <td><input\n                name=\"export\"\n                type=\"checkbox\"\n                checked={checked}\n                onChange={() => handleChange(props.episode.id)} /></td>\n            <td>\n                <button\n                    className=\"btn btn-danger btn-sm delete\"\n                    onClick={() => props.remove(props.episode.id)}\n                >\n                    X\n           </button>\n            </td>\n        </tr>\n    )\n}","import React from 'react';\n\nimport Row from './Row';\n\nexport default function list(props) {\n  return (\n    <table className=\"table table-striped mt-5\">\n      <thead>\n        <tr>\n          <th>Seriál</th>\n          <th>Série</th>\n          <th>Díl</th>\n          <th>Komentář</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.series.map(episode => (\n          <Row\n            key={episode.id}\n            episode={episode}\n            remove={id => props.remove(id)}\n            addToExport={id => props.addToExport(id)}\n            removeFromExport={id => props.removeFromExport(id)}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import React from 'react';\n\nexport default function alert(props) {\n  return (\n    <div className={`alert alert-${props.type}`}>\n      <p className=\"lead\">{props.message}</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class AddForm extends Component {\n  emptyState = {\n    title: {\n      content: '',\n      valid: false,\n    },\n    series: {\n      content: '',\n      valid: false,\n    },\n    episode: {\n      content: '',\n      valid: false,\n    },\n    comment: {\n      content: '',\n      valid: false,\n    },\n  };\n  state = {\n    ...this.emptyState,\n  };\n\n  inputChangeHandler(event, field) {\n    const updtedValue = event.target.value;\n    const valid = updtedValue !== '';\n    switch (field) {\n      case 'title':\n        this.setState({ title: { content: updtedValue, valid: valid } });\n        break;\n      case 'series':\n        this.setState({ series: { content: updtedValue, valid: valid } });\n        break;\n      case 'episode':\n        this.setState({ episode: { content: updtedValue, valid: valid } });\n        break;\n      case 'comment':\n        this.setState({ comment: { content: updtedValue, valid: valid } });\n        break;\n      default:\n        break;\n    }\n  }\n\n  isValid() {\n    let valid = true;\n    for (let input in this.state) {\n      valid = valid && this.state[input].valid;\n    }\n    return valid;\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    this.props.add(\n      this.state.title.content,\n      this.state.series.content,\n      this.state.episode.content,\n      this.state.comment.content\n    );\n    this.setState({ ...this.emptyState });\n  }\n\n  render() {\n    return (\n      <form id=\"serial-form\" onSubmit={event => this.onSubmit(event)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Seriál</label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            className=\"form-control\"\n            value={this.state.title.content}\n            onChange={event => this.inputChangeHandler(event, 'title')}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"series\">Série</label>\n          <input\n            type=\"text\"\n            id=\"series\"\n            className=\"form-control\"\n            value={this.state.series.content}\n            onChange={event => this.inputChangeHandler(event, 'series')}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"episode\">Díl</label>\n          <input\n            type=\"text\"\n            id=\"episode\"\n            className=\"form-control\"\n            value={this.state.episode.content}\n            onChange={event => this.inputChangeHandler(event, 'episode')}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"comment\">Komentář</label>\n          <input\n            type=\"text\"\n            id=\"comment\"\n            className=\"form-control\"\n            value={this.state.comment.content}\n            onChange={event => this.inputChangeHandler(event, 'comment')}\n          />\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Přidat\"\n          disabled={!this.isValid()}\n          className=\"btn btn-primary btn-block\"\n        />\n      </form>\n    );\n  }\n}\n","export const saveEpisode = episode => {\n  const episodes = getEpisodes();\n  episodes.push(episode);\n\n  // TODO - sort by title, series, episode\n  episodes.sort((a, b) => (a.title > b.title ? 1 : b.title > a.title ? -1 : 0));\n\n  localStorage.setItem('serials', JSON.stringify(episodes));\n};\n\nexport const getEpisodes = () => {\n  let episodes = [];\n\n  if (localStorage.getItem('serials') !== null) {\n    episodes = JSON.parse(localStorage.getItem('serials'));\n  }\n\n  return episodes;\n};\n\nexport const removeEpisode = id => {\n  const episodes = getEpisodes();\n\n  episodes.forEach((serial, index) => {\n    if (serial.id === id) {\n      episodes.splice(index, 1);\n    }\n  });\n\n  localStorage.setItem('serials', JSON.stringify(episodes));\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport List from './components/List';\nimport Alert from './components/Alert';\nimport AddForm from './containers/AddForm';\n\nimport { getEpisodes, saveEpisode, removeEpisode } from './services/storage';\n\nclass App extends Component {\n  state = {\n    alert: null,\n    toExport: [],\n  };\n\n  addEpisode(title, series, episode, comment) {\n    const data = getEpisodes();\n    data.sort(this.sortById);\n\n    const newId = data.length > 0 ? data[data.length - 1].id + 1 : 1;\n\n    episode = {\n      id: newId,\n      title: title,\n      series: series,\n      episode: episode,\n      comment: comment,\n    };\n\n    saveEpisode(episode);\n    this.showAlert('Episode added!', 'success');\n  }\n\n  removeEpisode(id) {\n    removeEpisode(id);\n    this.showAlert('Episode removed!', 'success');\n  }\n\n  sortById(a, b) {\n    if (a.id < b.id) {\n      return -1;\n    }\n    if (a.id > b.id) {\n      return 1;\n    }\n    return 0;\n  }\n\n  showAlert(message, type) {\n    const alert = <Alert type={type} message={message} />;\n    this.setState({ alert: alert });\n\n    setTimeout(() => this.setState({ alert: null }), 3 * 1_000);\n  }\n\n  addToExport(id) {\n    const checked = [...this.state.toExport];\n    checked.push(id);\n    this.setState({ toExport: checked });\n  }\n\n  removeFromExport(idToRemove) {\n    const checked = [...this.state.toExport];\n    checked.forEach((id, index) => {\n      if (idToRemove === id) {\n        checked.splice(index, 1);\n      }\n    });\n    this.setState({ toExport: checked });\n  }\n\n  export() {\n    const exportedData = [];\n    const idsToExport = [...this.state.toExport].sort();\n    const serials = getEpisodes();\n\n    idsToExport.forEach(idToExp => {\n      serials.forEach(episode => {\n        if (episode.id === idToExp) {\n          exportedData.push(episode);\n        }\n      });\n    });\n\n    const data = new Blob([JSON.stringify(exportedData)], {\n      type: 'text/plain',\n    });\n    const downloadUrl = window.URL.createObjectURL(data);\n\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.setAttribute('download', `serialy.json`);\n\n    document.body.appendChild(link);\n\n    link.click();\n\n    link.parentNode.removeChild(link);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container mt-2\">\n          {this.state.alert} {/* will show only if not null*/}\n          <AddForm\n            add={(title, series, episode, comment) =>\n              this.addEpisode(title, series, episode, comment)\n            }\n          />\n          <List\n            series={getEpisodes()}\n            remove={id => this.removeEpisode(id)}\n            addToExport={id => this.addToExport(id)}\n            removeFromExport={id => this.removeFromExport(id)}\n          />\n          {this.state.toExport.length !== 0 && (\n            <button\n              type=\"submit\"\n              className=\"btn btn-success btn-block mb-3\"\n              onClick={() => this.export()}\n            >\n              Exportovat\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}